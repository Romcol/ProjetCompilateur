/*
 *
 *       Auteur: Pedrono Marie-Jo
 *
 * 	création : 13 février 2002
 *
 *     nature : projet etudiant
 *
 */


options{
	JDK_VERSION="1.5";	
}

PARSER_BEGIN(Yaka)



public class Yaka implements Constants {
	public static Declaration declaration = new Declaration();
	public static TabIdent tabIdent = new TabIdent();
	public static StackExpression stackExpression = new StackExpression();
	public static Affectation affectation = new Affectation();
	public static YVM yvm = new YVMasm();
	public static Iteration iteration = new Iteration();
	public static Conditionnelle conditionnelle = new Conditionnelle();
	public static Fonction fonction = new Fonction();
	public static AppelFonction appelFonction = new AppelFonction();

	public static void main(String args[]) { 
		Yaka analyseur;
		java.io.InputStream input;

		if (args.length==1) {
			System.out.print(args[args.length-1] + ": \n");
			try {
				input = new java.io.FileInputStream(args[args.length-1]);
			} catch (java.io.FileNotFoundException e) {
				System.out.println("Fichier introuvable.");
				return;
			}
		} else if (args.length==0) {
			System.out.println("Lecture sur l'entree standard...");
			input = System.in;
		} else {
			System.out.println("Usage: java Gram [fichier]");
			return;
		}
		try {
			analyseur = new Yaka(input);
			analyseur.analyse();
			System.out.println("analyse syntaxique reussie!");
		} catch (ParseException e) {
			String msg = e.getMessage();
			msg = msg.substring(0,msg.indexOf("\n"));
			System.out.println("Erreur de syntaxe : "+msg);
		}
	} 
}

PARSER_END(Yaka)
/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS :
{public static String identLu,chaineLue;
 public static int entierLu;
}

/*** Skip whitespace and comments ***/
SKIP :
{
	" "
| "\t"
| "\n"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
	< ~[] >
}
<IN_COMMENT> SKIP:
{
	 < "*)" >  {SwitchTo(DEFAULT);} 
}


/* Mots réservés*/

TOKEN :
{
	< BOOLEEN: "BOOLEEN" >
| < VAR: "VAR" >
| < FAIRE: "FAIRE" >
| < SINON: "SINON" >
| < POUR: "POUR" >
| < SI: "SI" >
| < FSI: "FSI">
| < ENTIER: "ENTIER" >
| < RETOURNE: "RETOURNE" >
| < VRAI: "VRAI" >
| < TANTQUE: "TANTQUE" >
| <CONST : "CONST">
| <FAUX : "FAUX">
| <FAIT : "FAIT">
| <OU : "OU">
| <ET : "ET">
| <NON : "NON">
| <FONCTION : "FONCTION">
| <FFONCTION  : "FFONCTION">
| <PROGRAMME : "PROGRAMME" >
| <FPROGRAMME: "FPROGRAMME" >
| <PRINCIPAL : "PRINCIPAL">
| <FPRINCIPAL : "FPRINCIPAL">
| <ALORS : "ALORS">
| <ECRIRE : "ECRIRE">
| <LIRE : "LIRE">
| <ALALIGNE : "ALALIGNE">
}



/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
	< #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ > 
	{ entierLu = Integer.parseInt(image.toString());
				}
| < #lettre: ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
	{identLu =image.toString();	
	}
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
	{ chaineLue = image.toString();
	 }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/
void analyse() : {}
{
	 <PROGRAMME> <ident> {yvm.entete();}
	 (declFonction())*
	 <PRINCIPAL> {yvm.main();}
	 bloc()
	 <FPRINCIPAL>
	 <FPROGRAMME> { yvm.queue(); }
}

void bloc() : {}{
 (declConst())*
 (declVar())*  { yvm.alloc();}
  suiteInstr()
}

void declFonction() : {}
{
	{ fonction.init(); }

	type()

	 <FONCTION> 
	 <ident> { fonction.setName(YakaTokenManager.identLu); }
	 paramForms() {fonction.noMoreParams();}
	 bloc()
	 <FFONCTION> {fonction.addFunct();}
}

void paramForms() : {}
{
	"("(paramForm()(","paramForm())*)?")"
}

void paramForm() : {}
{
	type()  <ident> { fonction.newParam(YakaTokenManager.identLu); }
}

void declConst() : {}
{
	<CONST>  defConst() ( "," defConst())* ";"
}

void defConst() : {}
{
	
	<ident> {declaration.setCurrentIdent(YakaTokenManager.identLu);}
	 "=" valConst()
		
}

void valConst() : {}{
	<entier>	{declaration.defConstEntier(YakaTokenManager.entierLu);}
 | <ident>	{declaration.defConstIdent(YakaTokenManager.identLu);}
 | <VRAI> 	{declaration.defConstBool(-1);}
 | <FAUX> 	{declaration.defConstBool(0);}
}


void declVar() : {}
{
	<VAR> type()
	<ident> {declaration.defVar(YakaTokenManager.identLu);}
	("," 
			<ident>  {declaration.defVar(YakaTokenManager.identLu);}
	)* ";"
	
}

void type() : {}
{
	 <ENTIER> { declaration.setCurrentType(ValueType.ENTIER); fonction.setReturnType(ValueType.ENTIER); fonction.setCurrentParamType(ValueType.ENTIER);}
 | <BOOLEEN> { declaration.setCurrentType(ValueType.BOOLEEN); fonction.setReturnType(ValueType.BOOLEEN); fonction.setCurrentParamType(ValueType.BOOLEEN);}
}
/*
 * Syntaxe des instructions.
 */
void suiteInstr() : {}
{ (instruction() (";" (instruction())? )*)? }

void instruction() : {}
{
	affectation()
	| lecture()
	| ecriture()
	| iteration()
	| conditionnelle()
	| retourne()
}

void retourne() : {}
{
	<RETOURNE> expression() {fonction.retourne(stackExpression.getFinalType());}
}

void conditionnelle() : {}
{
	<SI> {conditionnelle.open();}
		expression() {conditionnelle.checkExprType(stackExpression.getFinalType());}
	<ALORS> suiteInstr() { conditionnelle.endThen(); }
	(<SINON> suiteInstr())?
	<FSI> {conditionnelle.close();}
}
void iteration() : {}
{
	<TANTQUE> {iteration.open();}
	expression() {iteration.checkExprType(stackExpression.getFinalType());}
	<FAIRE>
		suiteInstr() 
	<FAIT> {iteration.close();}
}
void affectation() : {}
{
	<ident> { affectation.setLeftIdent(YakaTokenManager.identLu); }
	"=" expression() { 
		affectation.setRightType(stackExpression.getFinalType()); affectation.eval();}
}

void lecture() : {}
{
	<LIRE> "(" <ident> ")" { yvm.lireEnt(YakaTokenManager.identLu); }
}

void ecriture() : {}
{
	<ECRIRE> "(" (expression() { yvm.ecrireValue(stackExpression.getFinalType()); } | <chaine> { yvm.ecrireChaine(YakaTokenManager.chaineLue); }) ")"
	| <ALALIGNE> { yvm.aLaLigne(); }
}


/*
 * Expression .
 */
void expression() : {}
{
	{ stackExpression.newExpression(); }
	simpleExpr() 
	(opRel() 
	simpleExpr() { stackExpression.eval(); }
	)?
}

void simpleExpr() : {}
{
	 terme() 
	 (opAdd() 
	 terme() { stackExpression.eval();}
	 )*
}

void terme() : {}
{
	facteur() 
	(opMul() 
	facteur()	{stackExpression.eval();}
	)*
}
void facteur() : {}
{   primaire() 
	|  opNeg() primaire() {stackExpression.evalNeg();}
}

void primaire(): {}
{
	 valeur()
 | "(" expression() ")" 
}

void valeur() : {}
{ <entier> 	{stackExpression.pushInt(YakaTokenManager.entierLu);}	
 | <ident> 	{appelFonction.init(YakaTokenManager.identLu);} (argumentsFonction())? {appelFonction.endOfCall();}
 | <VRAI> 	{stackExpression.pushBool(-1);}	
 | <FAUX> 	{stackExpression.pushBool(0);}
}

void argumentsFonction() : {}
{
	"("(expression(){ appelFonction.initArguments(); appelFonction.addArgument(stackExpression.getFinalType()); }
	(","expression() { appelFonction.addArgument(stackExpression.getFinalType()); } )*)?")"
}

void opRel() : {}
{
	 "=" 		{stackExpression.pushOp(Operation.EQUAL);}
 | "<>" 	{stackExpression.pushOp(Operation.NEQUAL);}
 | "<" 		{stackExpression.pushOp(Operation.INF);}
 | "<=" 	{stackExpression.pushOp(Operation.INFEQ);}
 | ">" 		{stackExpression.pushOp(Operation.SUP);}
 | ">=" 	{stackExpression.pushOp(Operation.SUPEQ);}
} 

void opAdd() : {}
{
		"+"		{stackExpression.pushOp(Operation.PLUS);}
	|  "-"	{stackExpression.pushOp(Operation.SUB);}
	| <OU>	{stackExpression.pushOp(Operation.OR);}
}

void opMul() : {}
{
	"*"		{stackExpression.pushOp(Operation.MUL);}
	| "/"		{stackExpression.pushOp(Operation.DIV);}
	| <ET>	{stackExpression.pushOp(Operation.AND);}
} 

void opNeg() : {}
{ "-" 		{stackExpression.pushOp(Operation.MINUS);}
 | <NON>	{stackExpression.pushOp(Operation.NOT);}
}


